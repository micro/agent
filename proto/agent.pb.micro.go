// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/agent.proto

package agent

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "go-micro.dev/v5/client"
	server "go-micro.dev/v5/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Agent service

type AgentService interface {
	Query(ctx context.Context, in *QueryRequest, opts ...client.CallOption) (*QueryResponse, error)
}

type agentService struct {
	c    client.Client
	name string
}

func NewAgentService(name string, c client.Client) AgentService {
	return &agentService{
		c:    c,
		name: name,
	}
}

func (c *agentService) Query(ctx context.Context, in *QueryRequest, opts ...client.CallOption) (*QueryResponse, error) {
	req := c.c.NewRequest(c.name, "Agent.Query", in)
	out := new(QueryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Agent service

type AgentHandler interface {
	Query(context.Context, *QueryRequest, *QueryResponse) error
}

func RegisterAgentHandler(s server.Server, hdlr AgentHandler, opts ...server.HandlerOption) error {
	type agent interface {
		Query(ctx context.Context, in *QueryRequest, out *QueryResponse) error
	}
	type Agent struct {
		agent
	}
	h := &agentHandler{hdlr}
	return s.Handle(s.NewHandler(&Agent{h}, opts...))
}

type agentHandler struct {
	AgentHandler
}

func (h *agentHandler) Query(ctx context.Context, in *QueryRequest, out *QueryResponse) error {
	return h.AgentHandler.Query(ctx, in, out)
}
